package com.mobile.app.moonplay;import android.content.Context;import android.content.Intent;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.Filter;import android.widget.Filterable;import android.widget.ImageView;import android.widget.RelativeLayout;import android.widget.TextView;import android.widget.Toast;import com.bumptech.glide.Glide;import java.util.ArrayList;import java.util.List;import androidx.annotation.NonNull;import androidx.recyclerview.widget.RecyclerView;import static com.mobile.app.moonplay.comments.arrayList;public class popularr extends RecyclerView.Adapter<popularr.MyViewHolder> implements Filterable {    private Context context;    private List<Movie> itemDataList;    private List<Movie> itemsModelsl;    public popularr(Context context, List<Movie> itemDataList) {        this.context = context;        this.itemDataList = itemDataList;    }    @NonNull    @Override    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup viewGroup, int i) {        View view= LayoutInflater.from(context).inflate(R.layout.rexo,viewGroup,false);        return new MyViewHolder(view);    }    @Override    public void onBindViewHolder(@NonNull MyViewHolder myViewHolder, final int i) {        if (itemDataList.get(i).getDescription().length() > 120) {            myViewHolder.des.setText(itemDataList.get(i).getDescription().substring(0, 120) + "...");        } else {            myViewHolder.des.setText(itemDataList.get(i).getDescription());        }        myViewHolder.des.setText(itemDataList.get(i).getDescription());        myViewHolder.txt_item_title.setText(itemDataList.get(i).getName());        //myViewHolder.des.setText(itemDataList.get(i).getDescription());        myViewHolder.genre.setText(itemDataList.get(i).getGenre());        try{            Glide.with(context)                    .load(itemDataList.get(i).getImage())                    .centerCrop()                    .into(myViewHolder.img_item);            // myViewHolder.genre.setVisibility(View.INVISIBLE);            //myViewHolder.txt_item_title.setVisibility(View.INVISIBLE);        }catch (OutOfMemoryError error){            error.printStackTrace();        }        myViewHolder.card.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Intent intent = new Intent(context, comments.class);                intent.putExtra("image", itemDataList.get(i).getImage());                intent.putExtra("genre",itemDataList.get(i).getGenre());                intent.putExtra("name",itemDataList.get(i).getName());                intent.putExtra("video",itemDataList.get(i).getVideo());                intent.putExtra("dex",itemDataList.get(i).getDescription());                intent.putExtra("mb",itemDataList.get(i).getMb());                intent.putExtra("type",itemDataList.get(i).getType());                intent.putExtra("res",itemDataList.get(i).getResolution());                intent.putExtra("upl",itemDataList.get(i).getUploader());                context.startActivity(intent);            }        });        myViewHolder.watch.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (!arrayList.contains(itemDataList.get(i).getName())) {                    arrayList.add(itemDataList.get(i).getName());                    Toast.makeText(context, "Added", Toast.LENGTH_SHORT).show();                }            }        });        myViewHolder.card.setOnLongClickListener(new View.OnLongClickListener() {            @Override            public boolean onLongClick(View v) {                return true;            }        });    }    @Override    public int getItemCount() {        if (itemDataList.size()<7){            return itemDataList.size();        }else        if (itemDataList.size()>0) {            return 7;        }        return itemDataList.size();    }    @Override    public long getItemId(int position) {        return position;    }    @Override    public Filter getFilter() {        Filter filter = new Filter() {            @Override            protected FilterResults performFiltering(CharSequence constraint) {                FilterResults filterResults = new FilterResults();                if(constraint == null || constraint.length() == 0){                    filterResults.count = itemsModelsl.size();                    filterResults.values = itemsModelsl;                }else{                    List<Movie> resultsModel = new ArrayList<>();                    String searchStr = constraint.toString().toLowerCase();                    for(Movie itemsModel:itemsModelsl){                        if(itemsModel.getName().contains(searchStr) || itemsModel.getGenre().contains(searchStr)){                            resultsModel.add(itemsModel);                        }                        filterResults.count = resultsModel.size();                        filterResults.values = resultsModel;                    }                }                return filterResults;            }            @Override            protected void publishResults(CharSequence constraint, FilterResults results) {                itemDataList = (List<Movie>) results.values;                notifyDataSetChanged();            }        };        return filter;    }    public class MyViewHolder extends RecyclerView.ViewHolder {        TextView txt_item_title,genre,des,watch;        ImageView img_item,io;        RelativeLayout card;        public MyViewHolder(@NonNull View itemView) {            super(itemView);            txt_item_title=itemView.findViewById(R.id.tvTitle);            img_item=itemView.findViewById(R.id.itemImage);            des=itemView.findViewById(R.id.typee);            watch=itemView.findViewById(R.id.watch);            card=itemView.findViewById(R.id.card);            genre=itemView.findViewById(R.id.type);        }    }}