package com.mobile.app.moonplay;import android.content.Context;import android.content.Intent;import android.content.SharedPreferences;import android.net.Uri;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.ImageView;import android.widget.RelativeLayout;import android.widget.TextView;import android.widget.Toast;import com.bumptech.glide.Glide;import java.util.List;import androidx.annotation.NonNull;import androidx.preference.PreferenceManager;import androidx.recyclerview.widget.RecyclerView;import com.mobile.app.moonplay.ui.playback.PlaybackActivity;import com.mobile.app.moonplay.util.ConfigKeys;import static com.mobile.app.moonplay.comments.arrayList;public class populary2 extends RecyclerView.Adapter<populary2.MyViewHolder> {    private Context context;    private List<quick> itemDataList;    private List<quick> itemsModelsl;    private SharedPreferences appPreferences;    public populary2(Context context, List<quick> itemDataList) {        this.context = context;        this.itemDataList = itemDataList;    }    @NonNull    @Override    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup viewGroup, int i) {        View view= LayoutInflater.from(context).inflate(R.layout.rexo,viewGroup,false);        return new MyViewHolder(view);    }    @Override    public void onBindViewHolder(@NonNull MyViewHolder myViewHolder, final int i) {        appPreferences = PreferenceManager.getDefaultSharedPreferences(context);        if (itemDataList.get(i).getDescription().length() > 120) {            myViewHolder.des.setText(itemDataList.get(i).getDescription().substring(0, 120) + "...");        } else {            myViewHolder.des.setText(itemDataList.get(i).getDescription());        }        myViewHolder.des.setText(itemDataList.get(i).getDescription());        myViewHolder.txt_item_title.setText(itemDataList.get(i).getName());        //myViewHolder.des.setText(itemDataList.get(i).getDescription());        myViewHolder.genre.setText(itemDataList.get(i).getGenre());        try{            Glide.with(context)                    .load(itemDataList.get(i).getImage())                    .centerCrop()                    .into(myViewHolder.img_item);            // myViewHolder.genre.setVisibility(View.INVISIBLE);            //myViewHolder.txt_item_title.setVisibility(View.INVISIBLE);        }catch (OutOfMemoryError error){            error.printStackTrace();        }        myViewHolder.card.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (itemDataList.get(i).getLink().startsWith("http")) {                    Intent playbackIntent = new Intent(context, PlaybackActivity.class);                    playbackIntent.setAction(Intent.ACTION_VIEW);                    playbackIntent.setData(Uri.parse(itemDataList.get(i).getLink()));                    playbackIntent.putExtra(Intent.EXTRA_TITLE, itemDataList.get(i).getName());                    playbackIntent.putExtra("genre",itemDataList.get(i).getGenre());                    playbackIntent.putExtra("video",itemDataList.get(i).getLink());                    if (itemDataList.get(i).getPhoto().startsWith("http")) {                        playbackIntent.putExtra("photo", itemDataList.get(i).getPhoto());                    }                    if (canResumePlayback(Uri.parse(itemDataList.get(i).getLink()), itemDataList.get(i).getName()))                    {                        playbackIntent.putExtra(PlaybackActivity.INTENT_EXTRA_JUMP_TO, getResumePosition());                    }                    //dump launch intent                    //save the playback url as last played                    updateLastPlayed(Uri.parse(itemDataList.get(i).getLink()), itemDataList.get(i).getName());                    context.startActivity(playbackIntent);                }            }        });        myViewHolder.list.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (!arrayList.contains(itemDataList.get(i).getName())) {                    arrayList.add(itemDataList.get(i).getName());                    Toast.makeText(context, "Added", Toast.LENGTH_SHORT).show();                }            }        });        myViewHolder.save.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                startDownload(itemDataList.get(i).getLink(), itemDataList.get(i).getName(),itemDataList.get(i).getImage());            }        });        myViewHolder.card.setOnLongClickListener(new View.OnLongClickListener() {            @Override            public boolean onLongClick(View v) {                return true;            }        });    }    @Override    public int getItemCount() {        if (itemDataList.size()<2){            return itemDataList.size();        }else        if (itemDataList.size()>0) {            return 2;        }        return itemDataList.size();    }    @Override    public long getItemId(int position) {        return position;    }    private void updateLastPlayed(Uri url, String title)    {        //set values        appPreferences.edit().putString(ConfigKeys.KEY_LAST_PLAYED_URL, url.toString())                .putString(ConfigKeys.KEY_LAST_PLAYED_TITLE, title).apply();    }    private long getResumePosition()    {        return appPreferences.getLong(ConfigKeys.KEY_LAST_PLAYED_POSITION, 0); //TODO: remove a few seconds (10s)    }    private boolean canResumePlayback(Uri url, String title)    {        //check if there is a playback position to resume stored        if (appPreferences.getLong(ConfigKeys.KEY_LAST_PLAYED_POSITION, -1) <= 0) return false;        //check that url or title is the same as the last played        return url.toString().equalsIgnoreCase(appPreferences.getString(ConfigKeys.KEY_LAST_PLAYED_URL, ""))                || title.equalsIgnoreCase(appPreferences.getString(ConfigKeys.KEY_LAST_PLAYED_TITLE, ""));    }    private void startDownload(String url, String name, String photo) {        Intent intent = new Intent(context, locality.class);        intent.putExtra("url", url);        intent.putExtra("namemovie",name);        intent.putExtra("picture",photo);        context.startActivity(intent);    }    public class MyViewHolder extends RecyclerView.ViewHolder {        TextView txt_item_title,genre,des,watch;        ImageView img_item,io;        RelativeLayout card;        ImageView fav,list,save;        public MyViewHolder(@NonNull View itemView) {            super(itemView);            txt_item_title=itemView.findViewById(R.id.tvTitle);            img_item=itemView.findViewById(R.id.itemImage);            des=itemView.findViewById(R.id.typee);            watch=itemView.findViewById(R.id.watch);            card=itemView.findViewById(R.id.card);            genre=itemView.findViewById(R.id.type);            fav=itemView.findViewById(R.id.vxwx);            save=itemView.findViewById(R.id.vxq);            list=itemView.findViewById(R.id.xc);        }    }}