package com.mobile.app.moonplay;import android.content.Context;import android.content.SharedPreferences;import android.net.Uri;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.ImageView;import android.widget.RelativeLayout;import android.widget.TextView;import com.bosphere.fadingedgelayout.FadingEdgeLayout;import com.bumptech.glide.Glide;import java.util.List;import androidx.annotation.NonNull;import androidx.preference.PreferenceManager;import androidx.recyclerview.widget.RecyclerView;import com.mobile.app.moonplay.util.ConfigKeys;public class firstx extends RecyclerView.Adapter<firstx.MyViewHolder> {    private Context context;    private List<doc> itemDataList;    private SharedPreferences appPreferences;    public firstx(Context context, List<doc> itemDataList) {        this.context = context;        this.itemDataList = itemDataList;    }    @NonNull    @Override    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup viewGroup, int i) {        View view= LayoutInflater.from(context).inflate(R.layout.lofixx,viewGroup,false);        return new MyViewHolder(view);    }    @Override    public void onBindViewHolder(@NonNull MyViewHolder myViewHolder, final int i) {        appPreferences = PreferenceManager.getDefaultSharedPreferences(context);        try{            Glide.with(context)                    .load(itemDataList.get(i).getPicture())                    .centerCrop()                    .into(myViewHolder.img_item);            // myViewHolder.genre.setVisibility(View.INVISIBLE);            //myViewHolder.txt_item_title.setVisibility(View.INVISIBLE);        }catch (OutOfMemoryError error){            error.printStackTrace();        }        FadingEdgeLayout mFadingEdgeLayout =myViewHolder.mFadingEdgeLayout;        mFadingEdgeLayout.setFadeEdges(false,false,true,false);        mFadingEdgeLayout.setFadeSizes(5, 200, 200, 200);        myViewHolder.card.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {            }        });            }    @Override    public int getItemCount() {        return 1;    }    private void updateLastPlayed(Uri url, String title)    {        //set values        appPreferences.edit().putString(ConfigKeys.KEY_LAST_PLAYED_URL, url.toString())                .putString(ConfigKeys.KEY_LAST_PLAYED_TITLE, title).apply();    }    private long getResumePosition()    {        return appPreferences.getLong(ConfigKeys.KEY_LAST_PLAYED_POSITION, 0); //TODO: remove a few seconds (10s)    }    private boolean canResumePlayback(Uri url, String title)    {        //check if there is a playback position to resume stored        if (appPreferences.getLong(ConfigKeys.KEY_LAST_PLAYED_POSITION, -1) <= 0) return false;        //check that url or title is the same as the last played        return url.toString().equalsIgnoreCase(appPreferences.getString(ConfigKeys.KEY_LAST_PLAYED_URL, ""))                || title.equalsIgnoreCase(appPreferences.getString(ConfigKeys.KEY_LAST_PLAYED_TITLE, ""));    }    public class MyViewHolder extends RecyclerView.ViewHolder {        FadingEdgeLayout mFadingEdgeLayout;        TextView txt_item_title,genre,des,watch;        ImageView img_item,io;        RelativeLayout card;        public MyViewHolder(@NonNull View itemView) {            super(itemView);            mFadingEdgeLayout=itemView.findViewById(R.id.fade);            img_item=itemView.findViewById(R.id.thumbnail);            card=itemView.findViewById(R.id.card);        }    }}