package com.mobile.app.moonplay;import android.content.Context;import android.content.Intent;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.Filter;import android.widget.Filterable;import android.widget.ImageView;import android.widget.RatingBar;import android.widget.RelativeLayout;import android.widget.TextView;import android.widget.Toast;import com.bumptech.glide.Glide;import com.google.android.gms.ads.formats.NativeAd;import com.google.android.gms.ads.formats.UnifiedNativeAd;import com.google.android.gms.ads.formats.UnifiedNativeAdView;import java.util.ArrayList;import java.util.List;import androidx.annotation.NonNull;import androidx.recyclerview.widget.RecyclerView;import static com.mobile.app.moonplay.comments.arrayList;public class popular1 extends RecyclerView.Adapter<RecyclerView.ViewHolder> implements Filterable {    private List<Movie> itemsModelsl;    private List<Movie> itemsModelListFiltered;    private Context context;    private List<Object> mRecyclerViewItems;    private static final int MENU_ITEM_VIEW_TYPE = 0;    // The unified native ad view type.    private static final int UNIFIED_NATIVE_AD_VIEW_TYPE = 1;    public popular1(Context context, List<Object> mRecyclerViewItems,List<Movie> ixx) {        this.context = context;        this.mRecyclerViewItems = mRecyclerViewItems;        this.itemsModelsl = ixx;        this.itemsModelListFiltered = itemsModelsl;    }    @NonNull    @Override    public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup viewGroup, int viewType) {        switch (viewType) {            case UNIFIED_NATIVE_AD_VIEW_TYPE:                View unifiedNativeLayoutView = LayoutInflater.from(                        context).inflate(R.layout.ad_unified,                        viewGroup, false);                return new UnifiedNativeAdViewHolder(unifiedNativeLayoutView);            case MENU_ITEM_VIEW_TYPE:                // Fall through.            default:                View view = LayoutInflater.from(context).inflate(R.layout.rexo, viewGroup, false);                return new MyViewHolder(view);        }    }    @Override    public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {        int viewType = getItemViewType(position);        switch (viewType) {            case UNIFIED_NATIVE_AD_VIEW_TYPE:                UnifiedNativeAd nativeAd = (UnifiedNativeAd) mRecyclerViewItems.get(position);                populateNativeAdView(nativeAd, ((UnifiedNativeAdViewHolder) holder).getAdView());                break;            case MENU_ITEM_VIEW_TYPE:                // fall through            default:                MyViewHolder myViewHolder= (MyViewHolder) holder;                Movie x=(Movie) mRecyclerViewItems.get(position);                if (x.getDescription().length() > 120) {                    myViewHolder.des.setText(x.getDescription().substring(0, 120) + "...");                } else {                    myViewHolder.des.setText(x.getDescription());                }                myViewHolder.des.setText(x.getDescription());                myViewHolder.txt_item_title.setText(x.getName());                //myViewHolder.des.setText(itemDataList.get(i).getDescription());                myViewHolder.genre.setText(x.getGenre());                try{                    Glide.with(context)                            .load(x.getImage())                            .centerCrop()                            .into(myViewHolder.img_item);                    // myViewHolder.genre.setVisibility(View.INVISIBLE);                    //myViewHolder.txt_item_title.setVisibility(View.INVISIBLE);                }catch (OutOfMemoryError error){                    error.printStackTrace();                }                myViewHolder.card.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        Intent intent = new Intent(context, comments.class);                        intent.putExtra("image", x.getImage());                        intent.putExtra("genre",x.getGenre());                        intent.putExtra("name",x.getName());                        intent.putExtra("video",x.getVideo());                        intent.putExtra("dex",x.getDescription());                        intent.putExtra("mb",x.getMb());                        intent.putExtra("type",x.getType());                        intent.putExtra("res",x.getResolution());                        intent.putExtra("upl",x.getUploader());                        context.startActivity(intent);                    }                });                myViewHolder.watch.setOnClickListener(new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        if (!arrayList.contains(x.getName())) {                            arrayList.add(x.getName());                            Toast.makeText(context, "Added", Toast.LENGTH_SHORT).show();                        }                    }                });                myViewHolder.card.setOnLongClickListener(new View.OnLongClickListener() {                    @Override                    public boolean onLongClick(View v) {                        return true;                    }                });        }    }    @Override    public int getItemViewType(int position) {        Object recyclerViewItem = mRecyclerViewItems.get(position);        if (recyclerViewItem instanceof UnifiedNativeAd) {            return UNIFIED_NATIVE_AD_VIEW_TYPE;        }        return MENU_ITEM_VIEW_TYPE;    }    private void populateNativeAdView(UnifiedNativeAd nativeAd,                                      UnifiedNativeAdView adView) {        // Some assets are guaranteed to be in every UnifiedNativeAd.        ((TextView) adView.getHeadlineView()).setText(nativeAd.getHeadline());        ((TextView) adView.getBodyView()).setText(nativeAd.getBody());        ((TextView) adView.getCallToActionView()).setText(nativeAd.getCallToAction());        // These assets aren't guaranteed to be in every UnifiedNativeAd, so it's important to        // check before trying to display them.        NativeAd.Image icon = nativeAd.getIcon();        if (icon == null) {            //adView.getIconView().setVisibility(View.INVISIBLE);        } else {            ((ImageView) adView.getIconView()).setImageDrawable(icon.getDrawable());            //adView.getIconView().setVisibility(View.VISIBLE);        }        if (nativeAd.getPrice() == null) {            adView.getPriceView().setVisibility(View.INVISIBLE);        } else {            adView.getPriceView().setVisibility(View.VISIBLE);            ((TextView) adView.getPriceView()).setText(nativeAd.getPrice());        }        if (nativeAd.getStore() == null) {            adView.getStoreView().setVisibility(View.INVISIBLE);        } else {            adView.getStoreView().setVisibility(View.VISIBLE);            ((TextView) adView.getStoreView()).setText(nativeAd.getStore());        }        if (nativeAd.getStarRating() == null) {            adView.getStarRatingView().setVisibility(View.INVISIBLE);        } else {            ((RatingBar) adView.getStarRatingView())                    .setRating(nativeAd.getStarRating().floatValue());            adView.getStarRatingView().setVisibility(View.VISIBLE);        }        if (nativeAd.getAdvertiser() == null) {         //   adView.getAdvertiserView().setVisibility(View.INVISIBLE);        } else {            ((TextView) adView.getAdvertiserView()).setText(nativeAd.getAdvertiser());          //  adView.getAdvertiserView().setVisibility(View.VISIBLE);        }        // Assign native ad object to the native view.        adView.setNativeAd(nativeAd);    }    @Override    public int getItemCount() {        if (itemsModelListFiltered.size()<10){            return itemsModelListFiltered.size();        }else        if (itemsModelListFiltered.size()>0) {            return 10;        }        return itemsModelListFiltered.size();    }    @Override    public Filter getFilter() {        Filter filter = new Filter() {            @Override            protected FilterResults performFiltering(CharSequence constraint) {                FilterResults filterResults = new FilterResults();                if(constraint == null || constraint.length() == 0){                    filterResults.count = itemsModelsl.size();                    filterResults.values = itemsModelsl;                }else{                    List<Movie> resultsModel = new ArrayList<>();                    String searchStr = constraint.toString().toLowerCase();                    for(Movie itemsModel:itemsModelsl){                        if(itemsModel.getName().contains(searchStr) || itemsModel.getGenre().contains(searchStr)){                            resultsModel.add(itemsModel);                        }                        filterResults.count = resultsModel.size();                        filterResults.values = resultsModel;                    }                }                return filterResults;            }            @Override            protected void publishResults(CharSequence constraint, FilterResults results) {                itemsModelListFiltered = (List<Movie>) results.values;                notifyDataSetChanged();            }        };        return filter;    }    public class MyViewHolder extends RecyclerView.ViewHolder {        TextView txt_item_title,genre,des,watch;        ImageView img_item,io;        RelativeLayout card;        public MyViewHolder(@NonNull View itemView) {            super(itemView);            txt_item_title=itemView.findViewById(R.id.tvTitle);            img_item=itemView.findViewById(R.id.itemImage);            des=itemView.findViewById(R.id.typee);            watch=itemView.findViewById(R.id.watch);            card=itemView.findViewById(R.id.card);            genre=itemView.findViewById(R.id.type);        }    }}