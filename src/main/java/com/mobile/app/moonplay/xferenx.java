package com.mobile.app.moonplay;import android.annotation.SuppressLint;import android.content.Context;import android.content.SharedPreferences;import android.net.Uri;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.Button;import android.widget.ImageView;import com.bumptech.glide.Glide;import com.google.firebase.firestore.CollectionReference;import com.google.firebase.firestore.EventListener;import com.google.firebase.firestore.FirebaseFirestore;import com.google.firebase.firestore.FirebaseFirestoreException;import com.google.firebase.firestore.Query;import com.google.firebase.firestore.QueryDocumentSnapshot;import com.google.firebase.firestore.QuerySnapshot;import java.util.ArrayList;import java.util.Collections;import java.util.List;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.preference.PreferenceManager;import androidx.recyclerview.widget.DefaultItemAnimator;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import com.mobile.app.moonplay.util.ConfigKeys;public class xferenx extends RecyclerView.Adapter<xferenx.MyViewHolder> {    private FirebaseFirestore db = FirebaseFirestore.getInstance();    private CollectionReference medieval = db.collection("Spanish");    private Context context;    private List<xference> itemDataList;    private SharedPreferences appPreferences;    public xferenx(Context context, List<xference> itemDataList) {        this.context = context;        this.itemDataList = itemDataList;    }    @NonNull    @Override    public MyViewHolder onCreateViewHolder(@NonNull ViewGroup viewGroup, int i) {        View view= LayoutInflater.from(context).inflate(R.layout.afro,viewGroup,false);        return new MyViewHolder(view);    }    @Override    public void onBindViewHolder(@NonNull MyViewHolder myViewHolder, @SuppressLint("RecyclerView") final int i) {        appPreferences = PreferenceManager.getDefaultSharedPreferences(context);        try{            Glide.with(context)                    .load(itemDataList.get(i).getImage())                    .centerCrop()                    .into(myViewHolder.img_item);            // myViewHolder.genre.setVisibility(View.INVISIBLE);            //myViewHolder.txt_item_title.setVisibility(View.INVISIBLE);        }catch (OutOfMemoryError error){            error.printStackTrace();        }        myViewHolder.txt_item_title.setText(itemDataList.get(i).getName());                /*        myViewHolder.txt_item_title.setOnLongClickListener(new View.OnLongClickListener() {            @Override            public boolean onLongClick(View view) {                Intent intent = new Intent(context, genact9.class);                intent.putExtra("search",itemDataList.get(i).getName());                intent.putExtra("tags",itemDataList.get(i).getMoviename());                intent.putExtra("id",itemDataList.get(i).getId());                context.startActivity(intent);                return true;            }        });                 */        medieval.orderBy("timestamp", Query.Direction.DESCENDING).addSnapshotListener(new EventListener<QuerySnapshot>() {            @Override            public void onEvent(@Nullable QuerySnapshot queryDocumentSnapshots, @Nullable FirebaseFirestoreException e) {                if (e!=null){                }else {                    List<Movie> movies = new ArrayList<>();                    for (QueryDocumentSnapshot doc : queryDocumentSnapshots) {                        Movie gigi = doc.toObject(Movie.class);                        gigi.setVideo(doc.getId());                        gigi.setUploader(medieval.getId());                        if (itemDataList.get(i).getMoviename().toLowerCase().trim().contains(gigi.getName().trim().toLowerCase())){                            if (!movies.contains(gigi))                                movies.add(gigi);                        }                    }                    if (movies.size() > 0) {                        Collections.shuffle(movies);                        RecyclerView view1= myViewHolder.recyclerView;                        view1.setHasFixedSize(true);                        view1.setLayoutManager(new LinearLayoutManager(context, LinearLayoutManager.HORIZONTAL, false));                        view1.setItemAnimator(new DefaultItemAnimator());                        MyItemAdapterxx adapter = new MyItemAdapterxx(context, movies);                        view1.setAdapter(adapter);                    }                }            }        });    }    @Override    public int getItemCount() {        if (itemDataList.size()<10){            return itemDataList.size();        }else        if (itemDataList.size()>0) {            return 10;        }        return itemDataList.size();    }    private void updateLastPlayed(Uri url, String title)    {        //set values        appPreferences.edit().putString(ConfigKeys.KEY_LAST_PLAYED_URL, url.toString())                .putString(ConfigKeys.KEY_LAST_PLAYED_TITLE, title).apply();    }    private long getResumePosition()    {        return appPreferences.getLong(ConfigKeys.KEY_LAST_PLAYED_POSITION, 0); //TODO: remove a few seconds (10s)    }    private boolean canResumePlayback(Uri url, String title)    {        //check if there is a playback position to resume stored        if (appPreferences.getLong(ConfigKeys.KEY_LAST_PLAYED_POSITION, -1) <= 0) return false;        //check that url or title is the same as the last played        return url.toString().equalsIgnoreCase(appPreferences.getString(ConfigKeys.KEY_LAST_PLAYED_URL, ""))                || title.equalsIgnoreCase(appPreferences.getString(ConfigKeys.KEY_LAST_PLAYED_TITLE, ""));    }    public class MyViewHolder extends RecyclerView.ViewHolder {        Button txt_item_title,genre,des,watch;        ImageView img_item,io;        RecyclerView recyclerView;        public MyViewHolder(@NonNull View itemView) {            super(itemView);            txt_item_title=itemView.findViewById(R.id.name);            img_item=itemView.findViewById(R.id.music_img);            recyclerView=itemView.findViewById(R.id.crime);        }    }}